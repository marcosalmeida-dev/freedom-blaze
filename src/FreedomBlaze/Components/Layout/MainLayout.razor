@using FreedomBlaze.Interfaces
@using FreedomBlaze.Models
@using FreedomBlaze.Services
@using FreedomBlaze.WebClients
@using Microsoft.ApplicationInsights
@using Microsoft.AspNetCore.Localization
@using System.Globalization

@inherits LayoutComponentBase

<MudThemeProvider @rendermode="InteractiveServer" @bind-IsDarkMode="@_isDarkMode" Theme="_theme" />
<MudSnackbarProvider @rendermode="InteractiveServer" />
<MudPopoverProvider @rendermode="InteractiveServer" />
<MudDialogProvider @rendermode="InteractiveServer"
FullWidth="true"
CloseButton="true"
CloseOnEscapeKey="true"
MaxWidth="MaxWidth.ExtraSmall"
Position="DialogPosition.Center" />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudImage Src="/img/freedom-blaze-logo-3-4-small.png" Class="app-icon" Alt="Freedom Blaze logo" Height="40" Width="30" />
        <MudText Typo="Typo.h5" Class="app-name ml-3">Freedom Blaze</MudText>
        <MudSpacer />

        <div class="select-container">
            <MudSelect T="string" Label="" @bind-Value="CultureService.CurrencyCultureName"
            AdornmentColor="Color.Primary" AnchorOrigin="Origin.BottomCenter" AdornmentIcon="@Icons.Material.Filled.ArrowDropDown"
            Variant="Variant.Outlined">
                @foreach (var currency in CurrencyModel.CurrencyListStatic)
                {
                    <MudSelectItem Value="@currency.CultureName" @key="@currency.CultureName">
                        <img src="@currency.FlagSvgPath" height="14" class="mr-1" />
                        @currency.Value (@currency.Symbol)
                    </MudSelectItem>
                }
            </MudSelect>
        </div>
        @if (_btcPriceCulture != null)
        {
            <MudIcon Icon="@Icons.Material.Filled.CurrencyBitcoin" Color="Color.Primary" Size="Size.Small" />
            <MudButton Variant="Variant.Text" DropShadow="false" Size="Size.Medium" Color="Color.Primary"
            OnClick="@(() => WriteTextAsync(_btcPriceCulture))">
                @_btcPriceCulture
            </MudButton>
        }
        <MudSwitch @bind-Value="@IsDarkMode" UncheckedColor="Color.Primary" Color="Color.Primary" Class="toggle-switch ma-4" T="bool" Label="Light/Dark" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2" Variant="DrawerVariant.Temporary">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer>
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@inject IJSRuntime JS
@inject TelemetryClient TelemetryClient
@inject NavigationManager Navigation
@inject IConfiguration Configuration
@inject IHttpContextAccessor ContextAccessor
@inject CultureService CultureService
@inject ISnackbar Snackbar
@inject AppState AppState

@code {
    MudTheme _theme = new MudTheme()
        {
            PaletteLight = new PaletteLight()
            {
                Primary = Colors.Orange.Darken2,
                Secondary = Colors.BlueGray.Darken1,
                AppbarBackground = Colors.Shades.Black,
            },
            PaletteDark = new PaletteDark()
            {
                Primary = Colors.Orange.Darken2,
                Secondary = Colors.Green.Lighten1,
                AppbarBackground = Colors.Shades.Black
            }
        };

    private bool _drawerOpen = false;

    private string _darkModeCookieName = "darkModeCookie";
    private bool _isDarkMode;
    private bool IsDarkMode
    {
        get => _isDarkMode;
        set
        {
            if (_isDarkMode != value)
            {
                _isDarkMode = value;
                OnDarkModeChanged();
            }
        }
    }

    private string? _btcPriceCulture;
    private Timer _timer;

    CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CultureService.OnCurrencyCultureChanged += (sender, args) => OnCurrencyChanged();
            AppState.OnChange += OnAppStateChanged;

            var savedDarkMode = await JS.InvokeAsync<string>("cookieHelper.getCookie", _darkModeCookieName);
            if (!string.IsNullOrEmpty(savedDarkMode))
            {
                IsDarkMode = bool.Parse(savedDarkMode);
            }

            await TrackEvents();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnAppStateChanged()
    {
        var currentCurrencyInfo = CurrencyModel.GetCurrencyList(CultureService.CurrencyCultureName).FirstOrDefault();
        _btcPriceCulture = (currentCurrencyInfo.CurrencyRateInUSD * AppState.BitcoinExchangeRate.BitcoinRateInUSD).ToString("C", currentCurrencyInfo.CultureInfo);

        await InvokeAsync(StateHasChanged);
    }

    private void OnCurrencyChanged()
    {
        var uri = new Uri(Navigation.Uri).GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
        var uriEscaped = Uri.EscapeDataString(uri);

        Navigation.NavigateTo(
            $"Culture/Set?culture={CultureService.CurrencyCultureName}&redirectUri={uriEscaped}",
            forceLoad: true);
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task OnDarkModeChanged()
    {
        await JS.InvokeVoidAsync("cookieHelper.setCookie", _darkModeCookieName, _isDarkMode.ToString(), 365);
    }

    private async Task TrackEvents()
    {
        // Capture user environment data (language, platform, user agent)
        var userEnvironment = await JS.InvokeAsync<UserEnvironment>("getUserEnvironment");

        var properties = new Dictionary<string, string>
        {
            { "Language", userEnvironment.Language },
            { "Platform", userEnvironment.Platform },
            { "UserAgent", userEnvironment.UserAgent }
        };

        // Track Page View
        var pageViewTelemetry = new Microsoft.ApplicationInsights.DataContracts.PageViewTelemetry
            {
                Name = Navigation.Uri,  // Page name based on the current URL
                Url = new Uri(Navigation.Uri)  // The actual page URL
            };

        foreach (var property in properties)
        {
            pageViewTelemetry.Properties.Add(property.Key, property.Value);
        }

        TelemetryClient.TrackPageView(pageViewTelemetry);
    }

    void SnackMessage(string message, string position = Defaults.Classes.Position.TopCenter, Severity severity = Severity.Info)
    {
        Snackbar.Clear();
        Snackbar.Configuration.SnackbarVariant = Variant.Text;
        Snackbar.Configuration.PositionClass = position;
        Snackbar.Add(message, severity);
    }

    async Task WriteTextAsync(string text)
    {
        try
        {
            await JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
            SnackMessage($"{text} Copied to clipboard!", position: Defaults.Classes.Position.TopRight, severity: Severity.Success);
        }
        catch
        {
        }
    }

    public void Dispose()
    {
        CultureService.OnCurrencyCultureChanged -= (sender, args) => OnCurrencyChanged();
        AppState.OnChange -= OnAppStateChanged;

        if (cancellationTokenSource != null && !cancellationTokenSource.IsCancellationRequested)
        {
            cancellationTokenSource.Cancel();
            cancellationTokenSource.Dispose();
        }

        _timer?.Dispose();
    }
}
