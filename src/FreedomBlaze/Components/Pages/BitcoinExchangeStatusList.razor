@using FreedomBlaze.Models
@using MudBlazor

<MudContainer Class="mt-12">
    <MudGrid>
        <MudItem xs="12" sm="6" md="6">
            <MudDataGrid Items="@ExchangeStatusList" ColumnResizeMode="ResizeMode.None" Hover="true" Dense="true">
                <Columns>
                    <PropertyColumn Title="Exchange Name" Property="x => x.ExchangeName">
                        <CellTemplate>
                            @context.Item.ExchangeName
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Title="Available" Property="x => x.IsExchangeAvailable">
                        <CellTemplate>
                            <MudIcon Icon="@GetIcon(context.Item.IsExchangeAvailable)"
                                     Color="@GetColor(context.Item.IsExchangeAvailable)" />
                        </CellTemplate>
                    </PropertyColumn>
                </Columns>
            </MudDataGrid>
        </MudItem>
        <MudItem xs="12" sm="6" md="6">
            <MudDataGrid Items="@CurrencyList" ColumnResizeMode="ResizeMode.None" Hover="true" Dense="true">
                <Columns>
                    <PropertyColumn Title="Currency" Property="x => x.FlagSvgPath">
                        <CellTemplate>
                            <MudAvatar>
                                <MudImage Src="@context.Item.FlagSvgPath" Alt="@context.Item.Symbol"></MudImage>
                            </MudAvatar>
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Title="$1.00 in Currency" Property="x => x.CurrencyRateInUSD">
                        <CellTemplate>
                            @context.Item.CurrencyRateInUSD.ToString("C", @context.Item.CultureInfo)
                        </CellTemplate>
                    </PropertyColumn>
                </Columns>
            </MudDataGrid>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [Parameter]
    public List<BitcoinExchangeStatusModel> ExchangeStatusList { get; set; } = new();

    [Parameter]
    public List<Currency> CurrencyList { get; set; } = new();

    private string GetIcon(bool isAvailable) => isAvailable ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Cancel;

    private Color GetColor(bool isAvailable) => isAvailable ? Color.Success : Color.Error;

    protected override Task OnInitializedAsync()
    {
        CurrencyList = CurrencyList.Where(w => w.CultureName == "en-US").ToList();

        return base.OnInitializedAsync();
    }

    private List<User> Users = new List<User>
    {
        new User { Name = "John Doe", Email = "john.doe@example.com" },
        new User { Name = "Jane Smith", Email = "jane.smith@example.com" },
        new User { Name = "Alice Johnson", Email = "alice.johnson@example.com" }
    };

    public class User
    {
        public string Name { get; set; }
        public string Email { get; set; }
    }
}
