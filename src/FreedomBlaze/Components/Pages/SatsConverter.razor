@page "/satsconverter"
@rendermode InteractiveAuto

@using System.Net.Http;
@using System.Text.Json;
@using System.Threading.Tasks;
@using System.Collections.Generic;
@using FreedomBlaze.Client.Helpers;
@using FreedomBlaze.Interfaces
@using FreedomBlaze.Models;
@using System.Globalization;
@using FreedomBlaze.Services
@using Microsoft.ApplicationInsights
@using Microsoft.AspNetCore.Localization
@using Microsoft.Extensions.Localization

<PageTitle>Freedom Blaze | Sats Converter</PageTitle>

<MudContainer Class="mt-4">
    <MudGrid>
        <MudItem xs="12" sm="6" md="12">
            <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">@Localizer["SatsConverter.Title"]</MudText>
            <MudText Align="Align.Center">@Localizer["SatsConverter.Body1"]</MudText>
        </MudItem>
    </MudGrid>
    <MudGrid Class="mt-2">
        <MudItem xs="12" sm="12" md="12" Class="d-flex justify-center">
            <MudStack>
                <MudSelect id="currency" Label="Currency" Variant="Variant.Outlined" @bind-Value="CultureService.CurrencyCultureName" AdornmentColor="Color.Primary">
                    @foreach (var currency in CurrencyModel.CurrencyListStatic)
                    {
                        <MudSelectItem Value="@currency.CultureName" @key="@currency.CultureName">
                            <img src="@currency.FlagSvgPath" height="14" class="mr-1" />
                            @currency.Value (@currency.Symbol)
                        </MudSelectItem>
                    }
                </MudSelect>

                <MudNumericField @bind-Value="currencyValue" Label="@currencyValueLabelName" MaxLength="9"
                OnBlur="ConvertToBitcoin" Culture="@CultureService.CurrentCulture" Format="N2" T="double?"
                HideSpinButtons="true" Variant="Variant.Outlined" Immediate="false"
                Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.FileCopy" IconSize="Size.Small"
                AdornmentAriaLabel="Copy" AdornmentColor="Color.Warning"
                OnAdornmentClick="@(() => WriteTextAsync(currencyValue?.ToString()))" />

                <MudNumericField @bind-Value="satsValue" Label="SATS" MaxLength="9"
                OnBlur="ConvertToCurrency"
                HideSpinButtons="true" Variant="Variant.Outlined" Immediate="false"
                Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.FileCopy" IconSize="Size.Small"
                AdornmentAriaLabel="Copy SATS" AdornmentColor="Color.Warning"
                OnAdornmentClick="@(() => WriteTextAsync(satsValue?.ToString()))" />

                @* <MudButton @onclick="ConvertToBitcoin"
                           StartIcon="@Icons.Material.Filled.CurrencyBitcoin" Color="Color.Primary"
                           Size="Size.Large"
                           Variant="Variant.Filled"
                           ButtonType="ButtonType.Button">
                    @Localizer["SatsConverter.ConvertButtonText"]
                </MudButton> *@
            </MudStack>
        </MudItem>
        <MudItem xs="12" sm="12" md="12" Class="d-flex justify-center">
            @if (_loading == false)
            {
                <MudPaper>
                    <MudDataGrid T="Currency" Items="@CurrencyList" RowStyleFunc="@_rowStyleFunc" ColumnResizeMode="ResizeMode.Column" Hover="true">
                        <Columns>
                            <PropertyColumn Title="Region" Property="x => x.Name">
                                <CellTemplate>
                                    <MudTooltip Text="@context.Item.Name">
                                        <MudAvatar>
                                            <MudImage Src="@context.Item.FlagSvgPath" Alt="@context.Item.Name"></MudImage>
                                        </MudAvatar>
                                    </MudTooltip>
                                </CellTemplate>
                            </PropertyColumn>
                            <PropertyColumn Title="BTC Price" Property="x => x.BitcoinPrice">
                                <CellTemplate>
                                    @if (context.Item.BitcoinPrice == 0)
                                    {
                                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                                    }
                                    else
                                    {
                                        <MudTooltip Text="Copy BTC Price">
                                            <MudLink Color="Color.Primary" Typo="Typo.h6" OnClick="@(() => WriteTextAsync(context.Item.BitcoinPrice.ToString()))">@context.Item.BitcoinPrice.ToString("C", @context.Item.CultureInfo)</MudLink>
                                        </MudTooltip>
                                    }
                                </CellTemplate>
                            </PropertyColumn>
                            <PropertyColumn Title="@currencyValueInCurrencyLabel" Property="x => x.CurrencyValueInCurrency">
                                <CellTemplate>
                                    @if (context.Item.CurrencyValueInCurrency == 0)
                                    {
                                        <MudText>--</MudText>
                                    }
                                    else
                                    {
                                        <MudTooltip Text="Copy Currency">
                                            <MudLink Color="Color.Secondary" Typo="Typo.h6" OnClick="@(() => WriteTextAsync(context.Item.CurrencyValueInCurrency.ToString()))">@context.Item.CurrencyValueInCurrency.ToString("C", @context.Item.CultureInfo)</MudLink>
                                        </MudTooltip>
                                    }
                                </CellTemplate>
                            </PropertyColumn>
                        </Columns>
                    </MudDataGrid>
                </MudPaper>
            }
            else
            {
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="@_loading" />
            }
        </MudItem>
    </MudGrid>
</MudContainer>

<BitcoinExchangeStatusList ExchangeStatusList="FreedomBlaze.WebClients.ExchangeRateProvider.BitcoinExchangeStatusList" CurrencyList="@CurrencyList" />

<SatsInfo />

@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject IStringLocalizer<Resources.Localization> Localizer
@inject IHttpContextAccessor ContextAccessor
@inject TelemetryClient Telemetry
@inject IExchangeRateProvider ExchangeRateProvider
@inject CultureService CultureService
@inject ISnackbar Snackbar

@implements IDisposable

@code {
    CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();
    private bool _loading = false;
    private List<Currency> CurrencyList = new List<Currency>();
    private Task<BitcoinExchangeRateModel> currencyRatesTask;

    public string currencyCultureName;

    private string currencyValueLabelName = "USD Value";
    private string currencyValueInCurrencyLabel = "Value in Currency";
    private const string CurrencyCookieName = "currencyValueCookie";

    private double? currencyValue;
    private double? lastCurrencyValue;
    private double? satsValue;
    private double? lastSatsValue;

    protected override async Task OnInitializedAsync()
    {
        currencyRatesTask = ExchangeRateProvider.GetExchangeRateAsync(cancellationTokenSource.Token);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleCultureInfo();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    async Task HandleCultureInfo()
    {
        try
        {
            _loading = true;
            StateHasChanged();

            var localizationValue = ContextAccessor?.HttpContext?.Features.Get<IRequestCultureFeature>()?.RequestCulture?.Culture?.Name;
            if (!string.IsNullOrEmpty(localizationValue))
            {
                //currencyValue = 0;
                currencyCultureName = CultureService.CurrentCulture.Name;

                if (!string.IsNullOrEmpty(currencyCultureName))
                {
                    await GetCurrencyValueFromCookie();
                }
            }

            var currencyRatesResult = await currencyRatesTask;

            await HandleCurrencyList(currencyRatesResult, currencyCultureName ?? "en-US");
        }
        catch (Exception ex)
        {
            SnackMessage($"Error loading exchange rates: {ex.Message}", Defaults.Classes.Position.BottomCenter, Severity.Error);
        }
        finally
        {
            _loading = false;
        }

        StateHasChanged();
    }

    async Task HandleCurrencyList(BitcoinExchangeRateModel currencyRatesResult, string currencyCultureName)
    {
        CurrencyList = CurrencyModel.BuildCurrencyList();

        var currentCurrency = CurrencyList.FirstOrDefault(f => f.CultureName == currencyCultureName);

        foreach (var currency in CurrencyList)
        {
            // Update each currency's exchange rate to USD
            currency.CurrencyRateInUSD = currencyRatesResult.CurrencyExchangeRate[currency.Value].Rate;

            // Update Bitcoin price in this currency based on its exchange rate to USD
            currency.BitcoinPrice = currency.CurrencyRateInUSD * currencyRatesResult.BitcoinRateInUSD;

            // Calculate currency values and satoshis based on the provided currency value
            if (currencyValue.HasValue && currencyValue.Value != 0 && currentCurrency.CurrencyRateInUSD != 0)
            {
                // Calculate the currency value in USD based on the current exchange rate
                var currencyValueInUSD = currencyValue.Value / currentCurrency.CurrencyRateInUSD;

                // Calculate the equivalent currency value in the target currency using the USD rate
                currency.CurrencyValueInCurrency = currencyValueInUSD * currency.CurrencyRateInUSD;
            }
        }

        satsValue = CurrencyConverterHelper.ConvertToSats(currentCurrency.CurrencyValueInCurrency, currentCurrency.BitcoinPrice);

        if (currencyValue > 0)
        {
            lastCurrencyValue = currencyValue;
            lastSatsValue = satsValue;
            currencyValueLabelName = $"{currentCurrency.Value}";
            currencyValueInCurrencyLabel = $"{currencyValue?.ToString("C", CultureService.CurrentCulture)} in Currency";

            await SetCurrencyValueCookie();
        }
    }

    async Task ConvertToBitcoin()
    {
        if (!currencyValue.HasValue || currencyValue.Value == 0)
        {
            SnackMessage("Insert a valid currency value!", Defaults.Classes.Position.BottomCenter, Severity.Warning);
            return;
        }

        if (currencyValue.HasValue && lastCurrencyValue.HasValue && currencyValue.Value == lastCurrencyValue.Value)
        {
            return;
        }

        try
        {
            // Track the custom event using TelemetryClient
            var properties = new Dictionary<string, string>
            {
                { "currencyValue", currencyValue.Value.ToString() },
                { "currencyCultureName", currencyCultureName }
            };
            Telemetry.TrackEvent("ConvertToBitcoin", properties);

            // Get exchange rates
            var exchangeRateAvg = await ExchangeRateProvider.GetExchangeRateAsync(cancellationTokenSource.Token);
            await HandleCurrencyList(exchangeRateAvg, currencyCultureName);
        }
        catch (Exception ex)
        {
            SnackMessage($"Exception occurred converting to Bitcoin: {ex.Message}", Defaults.Classes.Position.BottomCenter, Severity.Error);
        }
    }

    async Task ConvertToCurrency()
    {
        if (satsValue.HasValue && lastSatsValue.HasValue && satsValue.Value == lastSatsValue.Value)
        {
            return;
        }
        if (satsValue.HasValue && satsValue.Value > 0)
        {
            // Track the custom event using TelemetryClient
            var properties = new Dictionary<string, string>
            {
                { "satsValue", satsValue.Value.ToString() }
            };
            Telemetry.TrackEvent("ConvertToCurrency", properties);

            var btcPrice = CurrencyList.FirstOrDefault(f => f.CultureName == currencyCultureName && f.BitcoinPrice > 0)?.BitcoinPrice;
            currencyValue = CurrencyConverterHelper.ConvertSatsToCurrency(satsValue.Value, btcPrice.Value);
            await ConvertToBitcoin();
        }
    }

    void SnackMessage(string message, string position = Defaults.Classes.Position.TopCenter, Severity severity = Severity.Info)
    {
        Snackbar.Clear();
        Snackbar.Configuration.SnackbarVariant = Variant.Text;
        Snackbar.Configuration.PositionClass = position;
        Snackbar.Add(message, severity);
    }

    async Task WriteTextAsync(string text)
    {
        try
        {
            await JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
            SnackMessage("Copied to clipboard!");
        }
        catch (Exception ex)
        {
            SnackMessage($"Error copying text: {ex.Message}", Defaults.Classes.Position.BottomCenter, Severity.Error);
        }
    }

    async Task GetCurrencyValueFromCookie()
    {
        var currencyCookieValue = await JS.InvokeAsync<string>("cookieHelper.getCookie", CurrencyCookieName);
        if (!string.IsNullOrEmpty(currencyCookieValue))
        {
            currencyValue = double.Parse(currencyCookieValue);
        }
    }

    async Task SetCurrencyValueCookie()
    {
        if (currencyValue.HasValue)
        {
            await JS.InvokeVoidAsync("cookieHelper.setCookie", CurrencyCookieName, currencyValue.Value, 1); // Store for 1 day(s)
        }
    }

    Func<Currency, int, string> _rowStyleFunc => (x, i) =>
    {
        if (x.CultureName == currencyCultureName)
            return $"background-color:{Colors.Amber.Lighten4}";

        return "";
    };

    public void Dispose()
    {
        if (cancellationTokenSource != null && !cancellationTokenSource.IsCancellationRequested)
        {
            cancellationTokenSource.Cancel();
            cancellationTokenSource.Dispose();
        }
    }
}
