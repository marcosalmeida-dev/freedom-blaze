@page "/satsconverter"
@rendermode InteractiveAuto

@using System.Net.Http;
@using System.Text.Json;
@using System.Threading.Tasks;
@using System.Collections.Generic;
@using FreedomBlaze.Client.Components
@using FreedomBlaze.Client.Enums
@using FreedomBlaze.Client.Helpers;
@using FreedomBlaze.Interfaces
@using FreedomBlaze.Models;
@using System.Globalization;
@using FreedomBlaze.Services
@using Microsoft.ApplicationInsights
@using Microsoft.AspNetCore.Localization
@using Microsoft.Extensions.Localization

<PageTitle>Freedom Blaze | Sats Converter</PageTitle>

<MudContainer Class="mt-4" id="main-container">
    <MudGrid>
        <MudItem xs="12" sm="6" md="12">
            <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">@Localizer["SatsConverter.Title"]</MudText>
            <MudText Align="Align.Center">@Localizer["SatsConverter.Body1"]</MudText>
        </MudItem>
    </MudGrid>
    <MudGrid Class="mt-2">
        <MudItem xs="12" sm="12" md="12" Class="d-flex justify-center">
            <MudStack>
                <MudSelect id="currency" Label="Currency" Variant="Variant.Filled" @bind-Value="CultureService.CurrencyCultureName" 
                           AdornmentColor="Color.Primary" >
                    @foreach (var currency in CurrencyModel.CurrencyListStatic)
                    {
                        <MudSelectItem Value="@currency.CultureName" @key="@currency.CultureName">
                            <img src="@currency.FlagSvgPath" height="14" class="mr-1" />
                            @currency.Value (@currency.Symbol)
                        </MudSelectItem>
                    }
                </MudSelect>

                <MudNumericField @bind-Value="currencyValue" Label="@currencyValueLabelName" MaxLength="9"
                                 Culture="@CultureService.CurrentCulture" Format="N2" T="double?"
                                 DebounceInterval="250" OnDebounceIntervalElapsed="ConvertToBitcoin"
                                 HideSpinButtons="true" Variant="Variant.Text" 
                                 Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.FileCopy" IconSize="Size.Small"
                                 AdornmentAriaLabel="Copy" AdornmentColor="Color.Primary"
                                 OnAdornmentClick="@(() => WriteTextAsync(currencyValue?.ToString()))" />

                <MudNumericField @bind-Value="satsValue" Label="SATS" MaxLength="9"
                                 HelperText="@($"BTC {(satsValue ?? 0) / 100_000_000:F8}")" Pattern=""
                                 DebounceInterval="250" OnDebounceIntervalElapsed="ConvertToCurrency"
                                 HideSpinButtons="true" Variant="Variant.Text" 
                                 Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.FileCopy" IconSize="Size.Small"
                                 AdornmentAriaLabel="Copy SATS" AdornmentColor="Color.Primary"
                                 OnAdornmentClick="@(() => WriteTextAsync(satsValue?.ToString()))" />

                @* <MudButton @onclick="ConvertToBitcoin"
                           StartIcon="@Icons.Material.Filled.CurrencyBitcoin" Color="Color.Primary"
                           Size="Size.Large"
                           Variant="Variant.Filled"
                           ButtonType="ButtonType.Button">
                    @Localizer["SatsConverter.ConvertButtonText"]
                </MudButton> *@
            </MudStack>
        </MudItem>
        <MudItem xs="12" sm="12" md="12" Class="d-flex justify-center">
            <MudPaper>
                <MudDataGrid T="Currency" Items="@CurrencyList" RowStyleFunc="@_rowStyleFunc" ColumnResizeMode="ResizeMode.Column" Hover="true">
                    <Columns>
                        <PropertyColumn Title="Region" Property="x => x.Name">
                            <CellTemplate>
                                <MudTooltip Text="@context.Item.Name">
                                    <MudAvatar>
                                        <MudImage Src="@context.Item.FlagSvgPath" Alt="@context.Item.Name"></MudImage>
                                    </MudAvatar>
                                </MudTooltip>
                            </CellTemplate>
                        </PropertyColumn>
                        <PropertyColumn Title="BTC Price" Property="x => x.BitcoinPrice">
                            <CellTemplate>
                                @if (_loading)
                                {
                                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                                }
                                else
                                {
                                    <MudTooltip Text="Copy BTC Price">
                                        <MudLink Color="Color.Primary" Typo="Typo.h6" OnClick="@(() => WriteTextAsync(context.Item.BitcoinPrice.ToString()))">@context.Item.BitcoinPrice.ToString("C", @context.Item.CultureInfo)</MudLink>
                                    </MudTooltip>
                                }
                            </CellTemplate>
                        </PropertyColumn>
                        <PropertyColumn Title="@currencyValueInCurrencyLabel" Property="x => x.CurrencyValueInCurrency">
                            <CellTemplate>
                                @if (_loading)
                                {
                                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                                }
                                else
                                {
                                    <MudTooltip Text="Copy Currency">
                                        <MudLink Color="Color.Primary" Typo="Typo.h6" OnClick="@(() => WriteTextAsync(context.Item.CurrencyValueInCurrency.ToString()))">@context.Item.CurrencyValueInCurrency.ToString("C", @context.Item.CultureInfo)</MudLink>
                                    </MudTooltip>
                                }
                            </CellTemplate>
                        </PropertyColumn>
                        <PropertyColumn Title="@currencyValuePerUSDLabel" Property="x => x.CurrencyRateInUSD">
                            <CellTemplate>
                                @if (_loading)
                                {
                                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                                }
                                else
                                {
                                    <MudText Color="Color.Primary">@context.Item.CurrencyRateInUSD.ToString("C", @context.Item.CultureInfo)</MudText>
                                }
                            </CellTemplate>
                        </PropertyColumn>
                    </Columns>
                </MudDataGrid>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

<MudContainer id="content-area" MaxWidth="MaxWidth.Medium">

    <MudPaper Class="mt-4">
        <MudStack Spacing="2">
            <MudButton OnClick="OnExpandBitcoinInfoCollapseClick">@(_bitcoinInfoExpanded ? "Bitcoin Info-" : "Bitcon Info+")</MudButton>
            <MudDivider />
            <MudCollapse Expanded="_bitcoinInfoExpanded" id="bitcoin-info-section">
                <SatsInfo />
            </MudCollapse>
        </MudStack>
    </MudPaper>

    <MudPaper Class="mt-4">
        <MudStack Spacing="2">
            <MudButton OnClick="OnExpandExchangesCollapseClick">@(_exchangeListExpanded ? "Exchanges-" : "Exchanges+")</MudButton>
            <MudDivider />
            <MudCollapse Expanded="_exchangeListExpanded" id="exchanges-section">
                <BitcoinExchangeStatusList ExchangeStatusList="FreedomBlaze.WebClients.ExchangeRateProvider.BitcoinExchangeStatusList" />
            </MudCollapse>
        </MudStack>
    </MudPaper>

</MudContainer>

@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject IStringLocalizer<Resources.Localization> Localizer
@inject IHttpContextAccessor ContextAccessor
@inject TelemetryClient Telemetry
@inject IExchangeRateProvider ExchangeRateProvider
@inject CultureService CultureService
@inject ISnackbar Snackbar
@inject AppState AppState
@inject ThemeManager ThemeManager

@implements IDisposable

@code {
    private const string LastConversionTypeCookieName = "lastConversionTypeCookie";
    private const string CurrencyCookieName = "currencyValueCookie";
    private const string SatsCookieName = "satsValueCookie";
    private const string _darkModeCookieName = "darkModeCookie";

    CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();

    private bool _loading = false;
    private List<Currency> CurrencyList = new List<Currency>();

    public string currencyCultureName;

    private string currencyValueLabelName = "USD";
    private string currencyValueInCurrencyLabel = "Rate in Currency";
    private string currencyValuePerUSDLabel = "1,00 in USD";

    private double? currencyValue;
    private double? lastCurrencyValue;
    private double? satsValue;
    private double? lastSatsValue;
    private Func<Currency, int, string> _rowStyleFunc;

    BitcoinExchangeRateModel _bitcoinExchangeRateModel;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ThemeManager.OnThemeChanged += ThemeChanged;
            AppState.OnChange += OnAppStateChanged;

            currencyCultureName = CultureService.CurrentCulture.Name;
            await GetExchangeRates();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnAppStateChanged()
    {
        if (_loading == false)
        {
            await GetExchangeRates(AppState.BitcoinExchangeRate);
        }
    }

    async Task GetExchangeRates(BitcoinExchangeRateModel bitcoinExchangeRateModel = null)
    {
        try
        {
            _loading = true;
            await InvokeAsync(StateHasChanged);

            var conversionType = ConversionType.Unknown;
            _bitcoinExchangeRateModel = bitcoinExchangeRateModel;
            if (_bitcoinExchangeRateModel == null)
            {
                var localizationValue = ContextAccessor?.HttpContext?.Features.Get<IRequestCultureFeature>()?.RequestCulture?.Culture?.Name;
                if (!string.IsNullOrEmpty(localizationValue))
                {
                    var lastConversionType = await GetValueFromCookie(LastConversionTypeCookieName);
                    if (lastConversionType == ConversionType.BitcoinToCurrency.ToString() && double.TryParse(await GetValueFromCookie(SatsCookieName) ?? "0", out var sats))
                    {
                        satsValue = sats;
                        conversionType = ConversionType.BitcoinToCurrency;
                    }
                    if (lastConversionType == ConversionType.CurrencyToBitcoin.ToString() && double.TryParse(await GetValueFromCookie(CurrencyCookieName) ?? "0", out var currency))
                    {
                        currencyValue = currency;
                        conversionType = ConversionType.CurrencyToBitcoin;
                    }
                }

                _bitcoinExchangeRateModel = await ExchangeRateProvider.GetExchangeRateAsync(cancellationTokenSource.Token);
                AppState.BitcoinExchangeRate = _bitcoinExchangeRateModel;
            }

            await LoadCurrencyList(_bitcoinExchangeRateModel, currencyCultureName ?? "en-US", conversionType);

            SnackMessage($"Exchanges prices updated!", Defaults.Classes.Position.BottomCenter, Severity.Success);
        }
        catch (Exception ex)
        {
            SnackMessage($"Error loading exchange rates: {ex.Message}", Defaults.Classes.Position.BottomCenter, Severity.Error);
        }
        finally
        {
            _loading = false;
        }

        await InvokeAsync(StateHasChanged);
    }

    async Task LoadCurrencyList(BitcoinExchangeRateModel currencyRatesResult, string currencyCultureName, ConversionType conversionType)
    {
        CurrencyList = CurrencyModel.GetCurrencyList(currencyCultureName);

        var currentCurrency = CurrencyList.FirstOrDefault(f => f.CultureName == currencyCultureName);

        foreach (var currency in CurrencyList)
        {
            // Update each currency's exchange rate to USD
            currency.CurrencyRateInUSD = currencyRatesResult.CurrencyExchangeRate[currency.Value].Rate;

            // Update Bitcoin price in this currency based on its exchange rate to USD
            currency.BitcoinPrice = currency.CurrencyRateInUSD * currencyRatesResult.BitcoinRateInUSD;

            // Calculate currency values and satoshis based on the provided currency value
            if (currencyValue.HasValue && currencyValue.Value != 0 && currentCurrency.CurrencyRateInUSD != 0)
            {
                // Calculate the currency value in USD based on the current exchange rate
                var currencyValueInUSD = currencyValue.Value / currentCurrency.CurrencyRateInUSD;

                // Calculate the equivalent currency value in the target currency using the USD rate
                currency.CurrencyValueInCurrency = currencyValueInUSD * currency.CurrencyRateInUSD;
            }
        }

        currencyValueLabelName = $"{currentCurrency.Value}";

        if (currencyValue.HasValue && currencyValue.Value > 0 && conversionType == ConversionType.CurrencyToBitcoin)
        {
            satsValue = CurrencyConverterHelper.ConvertToSats(currencyValue.Value, currentCurrency.BitcoinPrice);
            lastSatsValue = satsValue;
        }
        if (satsValue.HasValue && satsValue.Value > 0 && conversionType == ConversionType.BitcoinToCurrency)
        {
            currencyValue = CurrencyConverterHelper.ConvertSatsToCurrency(satsValue.Value, currentCurrency.BitcoinPrice);
            currencyValueInCurrencyLabel = $"{currencyValue?.ToString("C", CultureService.CurrentCulture)} in Currency";
            lastCurrencyValue = currencyValue;
        }
    }

    async Task ConvertToBitcoin()
    {
        if (!currencyValue.HasValue || currencyValue.Value == 0)
        {
            await RemoveCookie(CurrencyCookieName);
            return;
        }

        if (currencyValue.HasValue && lastCurrencyValue.HasValue && currencyValue.Value == lastCurrencyValue.Value)
        {
            return;
        }

        try
        {
            // // Track the custom event using TelemetryClient
            // var properties = new Dictionary<string, string>
            // {
            //     { "currencyValue", currencyValue.Value.ToString() },
            //     { "currencyCultureName", currencyCultureName }
            // };
            // Telemetry.TrackEvent("ConvertToBitcoin", properties);

            await LoadCurrencyList(_bitcoinExchangeRateModel, currencyCultureName, ConversionType.CurrencyToBitcoin);

            await SetValueCookie(CurrencyCookieName, currencyValue?.ToString());
            await SetValueCookie(LastConversionTypeCookieName, ConversionType.CurrencyToBitcoin.ToString());
        }
        catch (Exception ex)
        {
            SnackMessage($"Exception occurred converting to Bitcoin: {ex.Message}", Defaults.Classes.Position.BottomCenter, Severity.Error);
        }
        finally
        {
        }
    }

    async Task ConvertToCurrency()
    {
        try
        {
            if (satsValue.HasValue == false || satsValue.Value == 0)
            {
                await RemoveCookie(SatsCookieName);
                return;
            }

            if (satsValue.HasValue && lastSatsValue.HasValue && satsValue.Value == lastSatsValue.Value)
            {
                return;
            }

            if (satsValue.HasValue && satsValue.Value > 0)
            {
                // // Track the custom event using TelemetryClient
                // var properties = new Dictionary<string, string>
                // {
                //     { "satsValue", satsValue.Value.ToString() }
                // };
                // Telemetry.TrackEvent("ConvertToCurrency", properties);

                var btcPrice = CurrencyList.FirstOrDefault(f => f.CultureName == currencyCultureName && f.BitcoinPrice > 0)?.BitcoinPrice;
                currencyValue = CurrencyConverterHelper.ConvertSatsToCurrency(satsValue.Value, btcPrice.Value);

                await LoadCurrencyList(_bitcoinExchangeRateModel, currencyCultureName, ConversionType.BitcoinToCurrency);

                await SetValueCookie(SatsCookieName, satsValue?.ToString());
                await SetValueCookie(LastConversionTypeCookieName, ConversionType.BitcoinToCurrency.ToString());
            }
        }
        catch (Exception ex)
        {
            SnackMessage($"Exception occurred converting to Currency: {ex.Message}", Defaults.Classes.Position.BottomCenter, Severity.Error);
        }
        finally
        {
        }
    }

    void SnackMessage(string message, string position = Defaults.Classes.Position.TopCenter, Severity severity = Severity.Info)
    {
        Snackbar.Clear();
        Snackbar.Configuration.SnackbarVariant = Variant.Text;
        Snackbar.Configuration.PositionClass = position;
        Snackbar.Add(message, severity);
    }

    private Task ThemeChanged(bool isDarkMode)
    {
        _rowStyleFunc = (x, i) =>
        {
            if (x.CultureName == currencyCultureName)
            {
                return isDarkMode ? $"background-color:{Colors.Shades.Black}" : $"background-color:{Colors.Gray.Lighten2}";
            }
            return "";
        };
        StateHasChanged();
        return Task.CompletedTask;
    }

    async Task WriteTextAsync(string text)
    {
        try
        {
            await JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
            SnackMessage("Copied to clipboard!");
        }
        catch (Exception ex)
        {
            SnackMessage($"Error copying text: {ex.Message}", Defaults.Classes.Position.BottomCenter, Severity.Error);
        }
    }

    async Task<string> GetValueFromCookie(string cookieName)
    {
        var currencyCookieValue = await JS.InvokeAsync<string>("cookieHelper.getCookie", cookieName);
        if (!string.IsNullOrEmpty(currencyCookieValue))
        {
            return currencyCookieValue;
        }
        return string.Empty;
    }

    async Task SetValueCookie(string cookieName, string cookieValue, int totalTimeInDays = 30)
    {
        await JS.InvokeVoidAsync("cookieHelper.setCookie", cookieName, cookieValue, totalTimeInDays);
    }

    async Task RemoveCookie(string cookieName)
    {
        await JS.InvokeVoidAsync("cookieHelper.setCookie", cookieName, 0, -1);
    }

    bool _exchangeListExpanded = false;

    private async Task OnExpandExchangesCollapseClick()
    {
        _exchangeListExpanded = !_exchangeListExpanded;
        if (_exchangeListExpanded)
        {
            await InvokeAsync(async () =>
            {
                await Task.Delay(300);
                await JS.InvokeVoidAsync("scrollToElement", "exchanges-section");
            });
        }
    }

    bool _bitcoinInfoExpanded = false;

    private async Task OnExpandBitcoinInfoCollapseClick()
    {
        _bitcoinInfoExpanded = !_bitcoinInfoExpanded;
        if (_bitcoinInfoExpanded)
        {
            await InvokeAsync(async () =>
            {
                await Task.Delay(300);
                await JS.InvokeVoidAsync("scrollToElement", "bitcoin-info-section");
            });
        }
    }

    public void Dispose()
    {
        if (cancellationTokenSource != null && !cancellationTokenSource.IsCancellationRequested)
        {
            cancellationTokenSource.Cancel();
            cancellationTokenSource.Dispose();
        }

        AppState.OnChange -= OnAppStateChanged;
    }
}
