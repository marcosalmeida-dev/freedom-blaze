@page "/contact"
@rendermode InteractiveAuto

@using System.ComponentModel.DataAnnotations
@using FreedomBlaze.Client.Helpers
@using Microsoft.Extensions.Localization

@inject IStringLocalizer<Resources.Localization> Localizer

<MudGrid Spacing="1" Justify="Justify.Center" Class="mt-8">
    <MudItem xs="12" sm="6" md="6" Class="justify-center">
        <MudStack>
            <MudText Align="Align.Center" Typo="Typo.h4">@Localizer["Contact.Title"]</MudText>
            <EditForm Model="@model" OnSubmit="OnSubmit">
                <DataAnnotationsValidator />
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="@Localizer["Contact.Title"]" HelperText="Max. 128"
                                      @bind-Value="model.Title" For="@(() => model.Title)"
                                      Variant="Variant.Outlined"
                                      Clearable="true" />
                        <MudTextField Label="@Localizer["Contact.Description"]" HelperText="Max. 1024" Class="mt-3"
                                      @bind-Value="model.Description" For="@(() => model.Description )"
                                      Clearable="true"
                                      Variant="Variant.Outlined"
                                      Lines="5" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">@Localizer["Contact.SendButtonText"]</MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
        </MudStack>
    </MudItem>
</MudGrid>

@inject HttpClient Http
@inject ISnackbar Snackbar

@code {
    ContactForm model = new ContactForm();

    private async Task OnSubmit()
    {
        var response = await Http.PostAsJsonAsync("api/contact/submit", model);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.SnackMessage("Message sent, thanks!", Defaults.Classes.Position.TopCenter, Severity.Success);
        }
        else
        {
            Snackbar.SnackMessage("Some error ocurred, sorry!", Defaults.Classes.Position.TopCenter, Severity.Error);
        }
    }

    public class ContactForm
    {
        [Required]
        [StringLength(128, MinimumLength = 3, ErrorMessage = "Title length can't be more than 128, and minimum 3.")]
        public string Title { get; set; }

        [Required]
        [StringLength(2048, MinimumLength = 3, ErrorMessage = "Title length can't be more than 2048, and minimum 3.")]
        public string Description { get; set; }
    }
}